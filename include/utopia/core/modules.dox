/**

\defgroup Core Core
\{

\brief Interface definitions and utility functions for building models

Core contains the main structures for building and running models.
Most importantly, it defines the Model base interface every model needs to
implement in order to be used within Utopia.

\}

\defgroup Rules Rules on Entities
\{

\ingroup Core
\brief Algorithms for conveniently applying function objects on entities

## The General Idea
A rule is a function that computes the new state of the entity it is applied
to.

### Synchronous vs Asynchronous Updates

Applying a rule **synchronously** means that its result is applied to all
entities *simultaneously*. In practice, one uses a cache for storing the
intermediate states of the cells and then copies/moves the cache entries into
the respective cell states.

Applying a rule **asynchronously** means that its result for a single entity
is immediately imposed onto this entity. To avoid preferences in execution
order, users may choose to use shuffling before iterating over the cells.

## Implementation

A rule must be implemented by the programmer as a function (object).
The function it represents must take a pointer to the entity as first argument and any number of additional arguments, and may capture arbitrary objects.
The function's return value is the new state of the entity it is applied to.

For asynchronously applied rules, no return value is required; the state may be
changed directly.

Currently, rules may also alter other members (i.e., tags) of the entity
they are applied to, and may even change states of other entities. *Notice
that this does not make sense if you intend to apply such a rule
synchronously!*

A rule is applied with the Utopia::apply_rule() function.
All overloads of this function take the rule, a container of entities, and optionally additional containers as arguments.
The latter two are iterated and their elements are applied to the rule in order of their occurance in the containers.
The number of containers the function is called with must match the number of arguments of the rule.
All containers must have the same size.

\warning There will be no runtime check if the inserted containers match in size!
The zip iterator will cause undefined behavior in that case.

Defining a rule taking two arguments and passing an additional container with arguments to be applied can look like this:
\code{.cc}
    auto my_rule = [](auto&& cell, auto&& arg){ return cell->state * arg; };
    Utopia::apply_rule<Utopia::Update::async,
                       Utopia::Shuffle::off>(my_rule, my_cells, my_args);
\endcode

Utopia::apply_rule() uses the \ref Iter "Zip iteration utilities".
The above function call is equivalent to the Python code:

\code{.py}
    for cell, arg in zip(my_cells, my_args):
        cell.state = rule(cell, arg)
\endcode

\note Additional argument containers are only available with Utopia::apply_rule() overloads for manual state update (see next section).

### Choosing Update Type When Calling `apply_rule`

Previously, the state cache for synchronous updates was implemented in the
entity itself. Therefore, users had to opt for *either* sync *or* async
updates when choosing the state data type. We now encourage the usage of
the Utopia::StateContainer with the specialization for the
Utopia::Update::manual tag (see
Utopia::StateContainer<StateType, Update::manual>).
This allows for choosing the update type via the Utopia::Update switch
directly when calling Utopia::apply_rule.

\code{.cc}
    using EntityTraits = Utopia::CellTraits<int, Utopia::Update::manual>;
    using CellManager = Utopia::CellManager<EntityTraits, MyModel>;

    CellManager cm = get_cm_from_somewhere();
    Utopia::apply_rule<Utopia::Update::async,
                       Utopia::Shuffle::off>(my_rule, cm.cells());
\endcode

### Multithreading Rules

Rules can also be applied in parallel, speeding up the entire computation.
This requires the optional dependencies to be installed (consult the `README.md` for further information).
Overloads for manual state update of apply_rule() can take a Utopia::ExecPolicy as first argument.
Omitting this policy argument has the same effect as using the Utopia::ExecPolicy::seq policy.
Parallel execution of Utopia algorithms can be selected at runtime.
See \ref Parallel for details.

\code{.cc}
    // Sequential execution
    Utopia::apply_rule<Utopia::Update::async>(my_rule, my_cells, my_args);

    // Possibly parallel execution
    // NOTE: `my_rule` must avoid data races!
    Utopia::apply_rule<Utopia::Update::async>(
        Utopia::ExecPolicy::par,
        my_rule,
        my_cells,
        my_args
    );
\endcode{}


\}



\defgroup Logging Output Logging
\{
\ingroup Core
\brief Utility functions for all logging output based on the spdlog backend.

All output of the simulation backend is intended to be controlled via
loggers. Loggers are implemented using spdlog
(see https://github.com/gabime/spdlog).
Regular output via the standard pipes `std::cout` and `std::cerr`
is strongly discouraged.

Utopia generates three types of loggers: One logger for Data I/O functions,
one for Core (backend) functions, and one for each model instance.
The Utopia::Model base class holds a logger instance which should be used
for information on the current model. To write log messages from within
Data I/O or Core backend functions, the respective logger first has to be
retrieved. This is achieved by using `spdlog::get`
(https://github.com/gabime/spdlog/wiki/2.-Creating-loggers#accessing-loggers-using-spdlogget).
The names for the two loggers are exported within the Utopia namespace.
All log levels are handled through the input configuration files.

The Utopia::PseudoParent automatically creates the utility loggers. For
executables without Models (like tests), the loggers have to be created
explicitly by manually calling Utopia::setup_loggers.
\}



\defgroup Model Model
\{
\ingroup Core
\brief The Model framework is the foundation for your future model.

By deriving from ::Utopia::Model, you have access to many infrastructure
features and can place your model into a hierarchy of models.
\}


\defgroup CellManager CellManager
\{
\ingroup Core
\brief An interface to build and use cellular automata

The ::Utopia::CellManager and associated constructs allow convenient use of
discretizations of physical space into rectangular, hexagonal, or triangular
grids.
\}

\defgroup AgentManager AgentManager
\{
\ingroup Core
\brief An interface for agent-based models
\}

\defgroup Entity Entity
\{
\ingroup Core
\brief The base class for managed entities, e.g. cells or agents.
\}

\defgroup Iter Iteration Utilities
\{
\ingroup Core
\brief Collection of classes and functions for custom iteration over ranges

This improves the standard C++ abilities to iterate over collections of
elements.

### Zip Function and Iterator

This implementation mirrors the Python `zip` function. It provides an iterator
over arbitrarily many heterogeneous collections. The Utopia::Itertools::zip
class stores references to the containers inserted into it and supplies
methods for retrieving the respective Utopia::Itertools::ZipIterator.

\code{.cc}
    #include <vector>
    #include <string>
    #include <utopia/core/zip.hh>

    constexpr size_t size = 10;
    std::vector<int> ints(size, 0);
    std::vector<double> doubles(size, 2.0);
    std::vector<std::string> strings(size, "A number:");

    auto range = Utopia::Itertools::zip(ints, doubles, strings);
\endcode

Zip iterators obey the C++ standard interface for iterators. They also adapt
their functionality on the lowest level iterator category of all containers
inserted into the object. For example, inserting an `std::vector` and an
`std::list` into Utopia::Itertools::zip will yield a bidirectional zip
iterator.

Dereferencing this iterator returns an `std::tuple` containing references
to the respective objects of the underlying containers. They can be captured
using structured bindings. Use `auto&` for capturing the references is not
necessary and might even be illegal in some situations. Extracting single
values via `std::get`, however, obeys regular value/reference syntax.

\code{.cc}
    auto it = range.begin();
    auto [i, d, s] = *it; // i, d, s are references
    i = 10; // modification of first entry of ints

    next = std::next(it); // advance STL-like
    auto another_i = std::get<0>(*next); // another_i is value

    i = std::get<0>(*next); // i is still reference
    i = 20; // modification of second entry of ints
\endcode

Zip iterators can be used in range-based and regular for loops. Additionally,
Utopia provides overloads for `ostream` std::operator<<() to write the contents
of a tuple into the command line. This works if the objects themselves can be
written into the same stream.

\code{.cc}
    #include <iostream>

    for (auto&& tuple : range) {
        std::cout << tuple << std::endl;
    }

    // equivalent explicit for loop without bindings:
    for (auto it = range.begin(); it != range.end(); ++it) {

        std::cout << "("
                  << std::get<0>(*it) << ", "
                  << std::get<1>(*it) << ", "
                  << std::get<2>(*it) << ")"
                  << std::endl;
    }
\endcode

Use the free function Utopia::adapt_zip() to build a ZipIterator from an
iterator adaptor and a set of containers.

\code{.cc}
    #include <iterator>

    auto range_in = Utopia::Itertools::zip(ints, doubles);
    std::vector<int> ints_out;
    std::vector<double> doubles_out;

    // create a ZipIterator that wraps back inserters
    auto it_out = Utopia::Itertools::zip_adapt(
        std::back_inserter,
        ints_out, doubles_out);

    std::transform(range_in.begin(), range_in.end(),
                   it_out,
                   [](auto&& tpl) {
                       auto [i, d] = tpl;
                       return std::make_tuple(i*i, d*d);
                   });
\endcode
\}



\defgroup TestTools Test Tools
\{
\ingroup Core
\brief   Gathers useful tools for writing tests in the Boost.Test framework

Have a look at the Utopia::TestTools namespace for more specific information.
\}


\defgroup Metaprogramming Metaprogramming and type restrictions
\{
\ingroup Core
\brief Metafunctions to `classify` types, in order to be
able to restrict template parameters, and some other helpers for type computation

\details These functions are executed by the compiler, 
not at runtime, and can be used to restrict the typse that can be passed to template 
functions or discriminate between them during execution via `if constexpr`.
The functions introduced here can later be
employed to implement c++20 concepts that serve the same purpose, but with less 
syntactic overhead and cleaner error messages. 
 Note that we call metafunctions implemented here
`concepts` for bervity as well, despite the ambiguity with the C++20 concepts feature.
Note also that while some of them are named like C++
NamedRequirements (e.g. is_container), they do not check if a type actually
fullfills the respective NamedRequirement.
The metafunctions in `type_traits.hh` implement a type hierarchy:
- an iterable is a type that has a subtype `iterator`.
- a string is either std::basic_string<T>, std::basic_string_view<T> or char* or const char*
- a container is an iterable that is not a string. Note that C++ defines
std::basic_string as a container as well, but HDF5 does treat arrays and strings
differently and hence this distinction is necessary here in order to get the
DataIO backend to work correctly.
- an associative container is a container T that defines T::key_type and T::key_compare
- an unordered associative container is a container that defines T::key_type, T::value_type and T::hasher.
- a linear container is a container that is not an associative container or
unordered associative container
- a random access container is a linear container the iterator of which has
std::random_access_iterator tag or another tag that can be converted to std::random_access_iterator_tag. 
- a type T is array-like if it is a container and has compile time constant size
given by an overload of the `get_size` metafunction.
- a type T is tuple-like if it has compile time constant size given by an
overload of the `get_size` metafunction. 
- a type is a graph if it has both vertex-descriptor and edge-descriptor
subtypes.

Aside from these type-restriction metafunctions, many more metafunctions are
implemented therein that help modify types in a useful way, like recursively removing
type extensions (const volative T****& --> T) or similar, or for checking if a
type is callable or not.
\}

\defgroup OutputStreams Output stream operators
\{
\ingroup Core
\brief  Pretty-print types like containers, tuples and various others to std::ostream or std::ofstream.
        To use them, put a using Utopia::Utils::operator<< before the first call. Then you 
        can do std::cout << many << funny << things << std::endl; as always.
\}

\defgroup Parallel Multithreading
\{
\ingroup Core
\brief Facilities for parallel execution based on runtime configuration

## Overview

C++17 introduced [execution policies](https://en.cppreference.com/w/cpp/algorithm/execution_policy_tag_t) for running STL algorithms in parallel, on multiple threads and/or vectorized instructions.
The decision of executing an algorithm is thereby taken at compile time because this optimizes performance and, depending on the particular policy chosen, poses restrictions on the algorithm and underlying data due to [data races](https://en.cppreference.com/w/cpp/language/memory_model#Threads_and_data_races).
However, most large STL libraries still do not support parallel execution policies.
Utopia therefore relies on optional third party software to implement multithreading.
The [Intel oneAPI toolkit](https://www.intel.com/content/www/us/en/developer/tools/oneapi/overview.html) is a complete software suite for developing high-performance software on heterogeneous, parallel computer architectures.
Users of Utopia can either install the complete oneAPI toolkit, or only the [Thread-Building Blocks (TBB)](https://www.intel.com/content/www/us/en/developer/tools/oneapi/onetbb.html) component to enable multithreading support in Utopia, depending on the used operating system.
Please refer to the Utopia installation instructions for further information.

The goal of the parallel facilities in Utopia is to shift the compile-time decision to a runtime decision.
Developers only *indicate* that their algorithms can be run in parallel and take all necessary precautions for that.
The core ingredients for this are overloads of [STL algorithms](https://en.cppreference.com/w/cpp/algorithm) where the `ExecutionPolicy` template parameter is replaced by a Utopia::ExecPolicy runtime parameter.

## Enabling Multithreading Facilities

Parallel execution must first be enabled through the build system.
In CMake, developers can use the function `enable_parallel()` on a target to enable possibly parallel execution.
This will have no effect if the prerequisites for parallel execution are not fulfilled on the system.

For models added to the build system via `add_model()`, parallel features are enabled by default.
Developers may pass the `DISABLE_PARALLEL` option to this function to globally disable any parallel features, as if `enable_parallel()` was not called on the respective model targets.

\code{.cmake}
# Define a target and enable parallel features
add_executable(my_target source.cc)
enable_parallel(my_target)

# Define a model and disable parallel features
add_model(my_model my_model.cc DISABLE_PARALLEL)
\endcode

## Writing Parallel Code

The basic rule of thumb is that developers who want their code to be executed in parallel using the Utopia facilities simply write the code as if it was *always* run in parallel, and then replace the STL execution policies with Utopia::ExecPolicy.
In particular, this means that data races have to be avoided, which can be achieved by using [guards against mutual execution](https://en.cppreference.com/w/cpp/thread/mutex) (`mutex`) or [atomic data types](https://en.cppreference.com/w/cpp/atomic) which are inherently safe when accessed by multiple threads simultaneously.
See the notes on [execution policies](https://en.cppreference.com/w/cpp/algorithm/execution_policy_tag_t) and [data races](https://en.cppreference.com/w/cpp/language/memory_model#Threads_and_data_races) for additional information.

Parallel execution at runtime is controlled through Utopia::ParallelExecution and is **disabled** by default.
Utopia::PseudoParent will **disable** parallel execution if the respective parameter space setting is not available.
In the base configuration, parallel execution is also **disabled** by default.
The static method Utopia::ParallelExecution::set can be used at any time in a program to enable or disable parallel execution.
If disabled, all algorithms simply fall back to their sequential version.

\code{.cc}
    #include <vector>
    #include <utopia/core/parallel.hh>

    using namespace Utopia;

    // Enable parallel if requirements are met
    ParallelExecution::set(ParallelExecution::Setting::enabled);

    std::vector<double> in(1E6, 0.0), out(1E6);
    std::copy(ExecPolicy::par_unseq, begin(in), end(in), begin(out));
\endcode

### Applying Rules in Parallel

In addition to the STL algorithms, apply_rule() may be called with Utopia::ExecPolicy as argument.
This execution policy is then used for applying the rule function in parallel, where all considerations for data races apply.
Additionally, apply_rule() will parallelize some internal operations like copying values automatically, if parallel exeuction is enabled.
To properly parallelize the application of a rule, additional rule arguments are a key ingredient.
Depending on the complexity of a rule, it might be feasible to compute values beforehand to avoid locking different threads against each other, and then pass these values as additional rule arguments:

\code{.cc}
    #include <mutex>
    #include <utopia/core/apply.hh>

    SomeRandomNumberGenerator rng;
    std::mutex m;  // Will guard main thread

    // Option 1: Multithreading with guard
    Utopia::apply_rule<Utopia::Update::sync>(
        Utopia::ExecPolicy::par,
        // Rule creates random number and returns its value
        [&](auto&){
            // Lock thread to access RNG safely
            std::lock_guard<std::mutex> guard(m);
            return rng();
        },
        my_cells
    );

    // Option 2: Apply RNG first, then use multithreading and vectorization
    std::vector<double> numbers(my_cells.size());
    std::generate(begin(numbers), end(numbers), rng);
    Utopia::apply_rule<Utopia::Update::sync>(
        Utopia::ExecPolicy::par_unseq,
        // Rule fetches value from 'numbers' and returns it
        [&](auto&, auto val){ return val; },
        my_cells,
        numbers
    );
\endcode

## Notes on Parallel Implementation

There can be various configurations for the ParallelSTL setup.
The parallel.hh header therefore requires information on the setup passed through several pre-processor macros, which, if defined, declare the following:

Macro Defined         | Meaning and Use
--------------------- | ---------------
`USE_INTERNAL_PSTL`   | The setup should rely on the standard library parallel policy definitions. This currently implies that the TBB package is installed and available.
`HAVE_ONEDPL`         | Intel oneDPL library has been found and is used.
`ENABLE_PARALLEL_STL` | Parallel features of Utopia are enabled. Does nothing if neither `USE_INTERNAL_PSTL` nor `HAVE_ONEDPL` are set.

\}

*/
