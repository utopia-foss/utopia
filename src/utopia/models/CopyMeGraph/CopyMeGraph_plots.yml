# The default plots of this model
#
# These can use the `based_on` feature with configurations specified in the
# accompanying *_base_plots.yml file and in the utopya base plot configs.
---
# Mean value plots ............................................................
some_state_mean:
  # Base it on some existing configuration
  based_on: mean_cell_state_over_time

  # Specify the dataset within the CopyMeGraph output that is to be plotted
  mean_of: g_static/some_state

some_trait_mean:
  based_on: mean_cell_state_over_time

  mean_of: g_static/some_trait

# Plots using the DAG framework ...............................................
# Plot individual cell states over time using a generic plotting function
single_cell_states:
  based_on: time_series.uni

  # Select some single cells to plot the states of, tagging it 'y'
  select:
    y:
      path: g_static/some_state
      with_previous_result: true  # makes the select data available as first
                                  # positional argument to the transform
                                  # operation; and the result of the first
                                  # transformation to the first argument of the
                                  # second transformation, etc.
      transform:
        - .sel: {vertex_idx: [0, 1, 2, 4, 8]}
        - increment

  helpers:
    set_title:
      title: Individual Cell States

# Perform the same plot with the data from the graph group 'g_dynamic'. In this
# case, the data is loaded as a `TimeSeriesGroup` (and not as Xarray) which
# also supports important xarray-methods such as coordinate access using .sel.
single_cell_states_dynamic:
  based_on: time_series.uni

  # Select some single cells to plot the states of, tagging it 'y'
  select:
    y:
      path: g_dynamic/some_state
      with_previous_result: true  # makes the select data available as first
                                  # positional argument to the transform
                                  # operation; and the result of the first
                                  # transformation to the first argument of the
                                  # second transformation, etc.
      transform:
        - .sel: {vertex_idx: [0, 1, 2, 4, 8]}
        - increment

  helpers:
    set_title:
      title: Individual Cell States

# Plot both mean state and mean trait using a generic plotting function
mean_state_and_trait:
  based_on: time_series.uni

  # Select the state and trait and average it spatially
  select:
    state_mean: &mean_xy
      path: g_static/some_state
      transform:
        - .mean: { dim: vertex_idx }
          with_previous_result: true  # ... to use the result of the select
                                      # operation as first positional argument
                                      # to this operation.

    trait_mean:
      <<: *mean_xy
      path: g_static/some_trait

  # Combine the mean values into a xr.Dataset and tag it with 'y'
  transform:
    - xr.Dataset:
        - '$<state>$': !dag_tag state_mean
          '$<trait>$': !dag_tag trait_mean
      tag: y

  # Configure helpers
  helpers:
    set_title:
      title: State and Trait (spatial mean)
    set_legend:
      use_legend: true

# Plot the final graph. Map the 'some_state' data to the node color, the node
# degree to the size of the nodes, and the weights to the edge width.
graph:
  based_on: graph

  select:
    graph_group: g_dynamic

  # Configure the created networkx graph object
  graph_creation:
    at_time_idx: -1                           # Select the last timestep
    node_props: ['some_trait', 'some_state']  # Select node and edge
    edge_props: ['weights']                   # properties from the GraphGroup

  # Configure the graph layout
  graph_drawing:
    positions:
      model: spring                   # The spring model positions the nodes
                                      # such that edge lengths are reduced.
      k: 1                            # Tweaking the spring model by adjusting
                                      # the optimal edge length (k) and the
      iterations: 100                 # maximum number of iterations done.
    nodes:
      node_color:
        from_property: some_state     # Map the 'some_state' data to the color
      node_size:
        from_property: degree         # Map the node degree to the node size
        scale_to_interval: [10, 200]  # Scale the (degree-)data to the given
                                      # interval (the default size is 300).
    edges:
      width:
        from_property: weights        # Map the 'weights' data to the edge
        scale_to_interval: [0.1, 1.2] # width and scale the data accordingly.

  helpers:
    set_title:
      title: Final Graph

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Some example DAG-based plots that are implemented in the CopyMeGraph model plots
# and performs some visualization that is not generalizable but needs be
# implemented specifically for the CopyMeGraph model

# ... Specilization for universe data
some_universe_plot:
  based_on: some_dag_based_CopyMeGraph_plot

  creator: universe
  universes: all

  select:
    scatter:
      path: g_static/some_state
      with_previous_result: true
      transform:
        - .mean: { dim: vertex_idx }
        - increment

  transform:
    - .coords: [!dag_tag scatter, time]
      tag: x_values
    - .mean: !dag_tag scatter
      tag: offset
    - .std: !dag_tag scatter
      tag: amplitude
    - define: [0.1234]
      tag: frequency

  dag_options:
    # Provide the base path within the universe to make selection easier
    select_path_prefix: data/CopyMeGraph

  scatter_kwargs:
    label: mean state

  helpers:
    set_labels:
      x: Time
    set_title:
      title: Some Absurd Plot

# ... Specilization for multiverse data
some_multiverse_plot:
  creator: multiverse
  based_on: some_dag_based_CopyMeGraph_plot
  enabled: false   # manually enable for a multiverse plot

  select_and_combine:
    fields: {}  # TODO requires further arguments here, will not work otherwise

# Facet Grid plot for a sweep over some_parameter' and another dimension
some_facet_grid_state_plot:
  based_on: some_facet_grid_plot
  enabled: false

  select_and_combine:
    base_path: data/CopyMeGraph
    fields:
      data: g_static/some_state

  hue: vertex_idx
