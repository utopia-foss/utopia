# Base configuration for SEIRD model plots
---
_variables:
  base_path: &base_path  data/SEIRD

  cmap: &cmap
    empty: &color_empty darkkhaki
    susceptible: &color_susceptible forestgreen
    exposed: &color_exposed darkorange
    infected: &color_infected firebrick
    recovered: &color_recovered slategray
    deceased: &color_deceased black
    source: &color_source maroon
    inert: &color_inert moccasin



# =============================================================================
#  ╔╦╗╔═╗╔╦╗╔═╗╦  ╔═╗╔╦╗╔═╗╔═╗
#   ║ ║╣ ║║║╠═╝║  ╠═╣ ║ ║╣ ╚═╗
#   ╩ ╚═╝╩ ╩╩  ╩═╝╩ ╩ ╩ ╚═╝╚═╝
# =============================================================================
# -- Overloads ----------------------------------------------------------------
# Overload some configs to insert model-specific settings

# Model-specific defaults
.defaults:
  based_on: .defaults

  # Optionally define something here ...


# -- Creators -----------------------------------------------------------------
.creator.universe:
  based_on:
    - .creator.universe
    - .defaults

  dag_options:
    select_path_prefix: *base_path

.creator.multiverse:
  based_on:
    - .creator.multiverse
    - .defaults

  select_and_combine:
    base_path: *base_path


# -- Plot functions -----------------------------------------------------------
.plot.phase_diagram:
  # Only works with UniversePlotCreator
  creator: universe
  universes: all

  module: model_plots.SEIRD
  plot_func: phase_diagram



# -- Styles -------------------------------------------------------------------
# .. Property cycles ..........................................................
# Using these as base configurations allows to have consistent kind colors
# NOTE The order in the evaluated format string needs to match the order in
#      which the cycling happens! This is an implicit mapping.

.style.prop_cycle.ESEIRDSI:
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[empty]:}', '{cmap[susceptible]:}', '{cmap[exposed]:}', '{cmap[infected]:}', '{cmap[recovered]:}', '{cmap[deceased]:}', '{cmap[source]:}', '{cmap[inert]:}'])"
      cmap: *cmap

.style.prop_cycle.seird:
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[susceptible]:}', '{cmap[exposed]:}', '{cmap[infected]:}', '{cmap[recovered]:}', '{cmap[deceased]:}'])"
      cmap: *cmap

.style.prop_cycle.deceased:
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[deceased]:}'])"
      cmap: *cmap

.style.prop_cycle.default:
  style:
    axes.prop_cycle: &default_prop_cycle "cycler('color', ['1f77b4', 'ff7f0e', '2ca02c', 'd62728', '9467bd', '8c564b', 'e377c2', '7f7f7f', 'bcbd22', '17becf'])"






# =============================================================================
#  ╔═╗╦  ╔═╗╔╦╗╔═╗
#  ╠═╝║  ║ ║ ║ ╚═╗
#  ╩  ╩═╝╚═╝ ╩ ╚═╝
# =============================================================================
# -- Densities time series ----------------------------------------------------

densities.uni:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
    - .hlpr.kind.time_series
    - .style.prop_cycle.ESEIRDSI

  select:
    data: densities

  x: time
  hue: kind

  helpers: &helpers_densities
    set_limits:
      y: [0., 1.]
    set_labels:
      y: Density [1/A]
      only_label_outer: true
    set_title:
      title: Densities
    set_legend:
      loc: best

densities.mv:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.with_auto_encoding
    - .plot.facet_grid.line
    - .hlpr.kind.time_series
    - .style.prop_cycle.ESEIRDSI

  expected_multiverse_ndim: [1, 2, 3]

  select_and_combine:
    fields:
      data: densities

  x: time
  hue: kind

  helpers:
    <<: *helpers_densities
    set_title:
      enabled: false
    set_suptitle:
      title: Densities


# -- Any kind of phase plot ---------------------------------------------------
phase_diagram:
  based_on:
    - .defaults
    - .creator.universe
    - .plot.facet_grid.scatter
  select:
    kind:
      path: densities
  transform:
    - .sel: [ !dag_tag kind, { kind: susceptible } ]
      kwargs: { drop: true }
      tag: susceptible
    - .sel: [ !dag_tag kind, { kind: exposed } ]
      kwargs: { drop: true }
      tag: exposed
    - .sel: [ !dag_tag kind, { kind: infected } ]
      kwargs: { drop: true }
      tag: infected
    - .sel: [ !dag_tag kind, { kind: recovered } ]
      kwargs: { drop: true }
      tag: recovered
    - operation: xr.Dataset
      kwargs:
        data_vars:
          susceptible: !dag_tag susceptible
          exposed: !dag_tag exposed
          infected: !dag_tag infected
          recovered: !dag_tag recovered
      tag: data

  cmap: viridis_r
  hue: time
  helpers:
    set_title:
      title: Phase Diagram
    set_limits:
      x: [0, ~]
      y: [0, ~]

  # Parameters that are passed on to plt.scatter
  s: 10

phase_diagram/SI:
  based_on: phase_diagram

  # Select from which densities to create the phase diagram
  x: susceptible
  y: infected

  helpers:
    set_labels:
      x: Susceptible Density [1/A]
      y: Infected Density [1/A]

phase_diagram/SE:
  based_on: phase_diagram

  x: susceptible
  y: exposed

  helpers:
    set_labels:
      x: Susceptible Density [1/A]
      y: Exposed Density [1/A]

phase_diagram/EI:
  based_on: phase_diagram

  x: exposed
  y: infected

  helpers:
    set_labels:
      x: Exposed Density [1/A]
      y: Infected Density [1/A]




# --- Counter-based -----------------------------------------------------------

counters:
  based_on:
    - .creator.universe
    - .plot.facet_grid

  select:
    counts: counts
    d_counts:
      path: counts
      transform:
        - .diff: [!dag_prev , time]
  dag_options:
    select_path_prefix: data/SEIRD

  style:
    # Set the default prop cycle; somehow lost for categorical label dimension
    axes.prop_cycle: *default_prop_cycle

  helpers:
    set_limits:
      x: [0, max]
      y: [0, ~]

    # Only set the x labels on the bottom row, as x-axes are shared.
    axis_specific:
      bottom_row:
        axis: [~, -1]
        set_labels:
          x: Time [Iteration Steps]


# .. Movement stats ...........................................................
movement:
  based_on: counters

  transform:
    - .sel: [!dag_tag d_counts]
      kwargs:
        label:
          - move_randomly
          - move_away_from_infected
      tag: data

  kind: line
  x: time
  hue: label

  helpers:
    set_labels:
      y: Movement Events


# .. State transitions ........................................................
transitions/raw:
  based_on: counters

  transform:
    - &op_sel_transitions
      .sel: [!dag_tag d_counts]
      kwargs:
        label:
          - empty_to_susceptible
          - living_to_empty
          - susceptible_to_exposed_contact
          - susceptible_to_exposed_random
          - susceptible_to_exposed_controlled
          - exposed_to_infected
          - infected_to_recovered
          - infected_to_deceased
          - recovered_to_susceptible

    # Define as data to be plotted
    - define: !dag_prev
      tag: data

  kind: line
  x: time
  col: label
  col_wrap: 3
  sharey: true

transitions/combined: &transitions_combined
  based_on: counters

  transform:
    - *op_sel_transitions
    - define: !dag_prev
      tag: data

  kind: line
  x: time
  hue: label

  helpers:
    set_labels:
      y: Counts

transitions/smoothed:
  <<: *transitions_combined

  transform:
    - *op_sel_transitions

    # Apply rolling mean over a number of time coordinates
    - callattr: [!dag_prev , rolling]
      kwargs:
        dim:
          # NOTE This value should be reduced if writing less frequently
          time: &smoothed_by 7
        # Configure rolling window such that early values are included
        min_periods: 2
        center: false
    - callattr: [!dag_prev , mean]

    # Define as data to be plotted
    - define: !dag_prev
      tag: data

  helpers:
    set_labels:
      y: !format ["Counts (smoothed over {} data points)", *smoothed_by]



# --- Distributions -----------------------------------------------------------

age_distribution:
  based_on:
    - .defaults
    - .creator.universe
    - .plot.histogram

  select:
    age: age
    kind: kind

  x: age
  hue: kind

  helpers:
    set_labels:
      x: Age
      y: Counts
    set_title:
      title: Age Distribution

age_distribution/final:
  based_on:
    - age_distribution
    - .style.prop_cycle.seird
  transform:
    - SEIRD.compute_age_distribution:
        age: !dag_tag age
        kind: !dag_tag kind
        coarsen_by: 10
    # Select the last time step
    - .isel: [!dag_prev , {time: -1}]
      tag: counts

  helpers:
    set_title:
      title: Final Age Distribution


age_distribution/time_series:
  based_on:
    - age_distribution
    - .style.prop_cycle.seird
    - .animation.ffmpeg
  transform:
    - SEIRD.compute_age_distribution:
        age: !dag_tag age
        kind: !dag_tag kind
        coarsen_by: 10
        normalize: false  # optional. Default: false
      tag: counts

  # Represent the time dimension as frames of the animation
  frames: time


age_distribution/deceased:
  based_on:
    - age_distribution
    - .style.prop_cycle.deceased
  transform:
    - SEIRD.compute_age_distribution:
        age: !dag_tag age
        kind: !dag_tag kind
        coarsen_by: 10
        compute_for_kinds: [deceased]
    - .sum: [!dag_prev , time]
    - print: !dag_prev
      tag: counts

  helpers:
    set_title:
      title: Deceased Age Distribution





# --- CA Plots ----------------------------------------------------------------
ca/state:
  based_on:
    - .creator.universe
    - .plot.ca

  select:
    kind: kind

  to_plot:
    kind:
      title: State
      limits: [0, 7]
      cmap: *cmap  # NOTE Colors need to be in the correct ordering!


ca/age:
  based_on:
    - .creator.universe
    - .plot.ca

  select:
    age: age

  to_plot:
    age:
      title: Age
      cmap: YlGn


ca/clusters:  # FIXME Does not show clusters in hexagonal mode
  based_on:
    - .creator.universe
    - .plot.ca

  select:
    cluster:
      path: cluster_id
      with_previous_result: true
      transform:
        - where: ['!=', 0]       # 0 is masked: not part of a cluster
        - np.fmod: 20

  to_plot:
    cluster:
      title: Clusters
      limits: [0, 20]
      cmap: tab20
      no_cbar_markings: true
