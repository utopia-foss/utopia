# Base configuration for SEIRD model plots
---
.variables:
  base_path: &base_path  data/SEIRD

  cmap: &cmap
    empty: &color_empty darkkhaki
    susceptible: &color_susceptible forestgreen
    exposed: &color_exposed darkorange
    infected: &color_infected firebrick
    recovered: &color_recovered slategray
    deceased: &color_deceased black
    source: &color_source maroon
    inert: &color_inert moccasin

  style:
    constrained_layout: &constrained_layout
      figure.constrained_layout.use: true


# -- Overloads ----------------------------------------------------------------
# Overload some configs to insert SEIRD-specific settings

.creator.universe:
  based_on: .creator.universe

  dag_options:
    select_path_prefix: *base_path

.creator.multiverse:
  based_on: .creator.multiverse

  select_and_combine:
    base_path: *base_path


.animation.ffmpeg:
  based_on: .animation.ffmpeg
  animation:
    writer_kwargs:
      ffmpeg:
        init:
          fps: 8
        saving:
          dpi: 300

.animation.frames:
  based_on: .animation.frames
  animation:
    writer_kwargs:
      frames:
        saving:
          dpi: 300


# -- Styles -------------------------------------------------------------------
# .. Property cycles ..........................................................
# Using these as base configurations allows to have consistent kind colors
# NOTE The order in the evaluated format string needs to match the order in
#      which the cycling happens! This is an implicit mapping.

style.prop_cycle.ESEIRDSI:
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[empty]:}', '{cmap[susceptible]:}', '{cmap[exposed]:}', '{cmap[infected]:}', '{cmap[recovered]:}', '{cmap[deceased]:}', '{cmap[source]:}', '{cmap[inert]:}'])"
      cmap: *cmap

style.prop_cycle.seird:
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[susceptible]:}', '{cmap[exposed]:}', '{cmap[infected]:}', '{cmap[recovered]:}', '{cmap[deceased]:}'])"
      cmap: *cmap

style.prop_cycle.deceased:
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[deceased]:}'])"
      cmap: *cmap

style.prop_cycle.default:
  style:
    axes.prop_cycle: &default_prop_cycle "cycler('color', ['1f77b4', 'ff7f0e', '2ca02c', 'd62728', '9467bd', '8c564b', 'e377c2', '7f7f7f', 'bcbd22', '17becf'])"



# =============================================================================
# == PLOTS ====================================================================
# =============================================================================

# -- Densities time series ----------------------------------------------------

densities.uni:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
    - .hlpr.kind.time_series
    - style.prop_cycle.ESEIRDSI

  select:
    data: densities

  x: time
  hue: kind

  helpers: &helpers_densities
    set_limits:
      y: [0., 1.]
    set_labels:
      y: Density [1/A]
      only_label_outer: true
    set_title:
      title: Densities
    set_legend:
      loc: best

densities.mv:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.with_auto_encoding
    - .plot.facet_grid.line
    - .hlpr.kind.time_series
    - style.prop_cycle.ESEIRDSI

  expected_multiverse_ndim: [1, 2, 3]

  select_and_combine:
    fields:
      data: densities

  x: time
  hue: kind

  helpers:
    <<: *helpers_densities
    set_title:
      enabled: false
    set_suptitle:
      title: Densities


# -- Any kind of phase plot ---------------------------------------------------
phase_diagram:
  based_on: .default_style_and_helpers

  creator: universe
  universes: all

  module: model_plots.SEIRD
  plot_func: phase_diagram

  cmap: viridis_r

  helpers:
    set_title:
      title: Phase Diagram
    set_limits:
      x: [0, ~]
      y: [0, ~]

  # Parameters that are passed on to plt.scatter
  s: 10




# --- Counter-based -----------------------------------------------------------

counters:
  based_on:
    - .creator.universe
    - .dag.generic.facet_grid

  select:
    counts: counts
    d_counts:
      path: counts
      transform:
        - .diff: [!dag_prev , time]
  dag_options:
    select_path_prefix: data/SEIRD

  style:
    # Set the default prop cycle; somehow lost for categorical label dimension
    axes.prop_cycle: *default_prop_cycle

  helpers:
    set_limits:
      x: [0, max]
      y: [0, ~]

    # Only set the x labels on the bottom row, as x-axes are shared.
    axis_specific:
      bottom_row:
        axis: [~, -1]
        set_labels:
          x: Time [Iteration Steps]


# --- Distributions -----------------------------------------------------------

age_distribution:  # FIXME Migrate plot
  based_on:
    - .default_style_and_helpers
    - .creator.universe
    - .dag.generic.histogram

  select:
    age: age
    kind: kind
  dag_options:
    select_path_prefix: data/SEIRD

  x: age
  hue: kind

  helpers:
    set_labels:
      x: Age
      y: Counts
    set_title:
      title: Age Distribution


# --- Grid Snapshots ----------------------------------------------------------
# NOTE These can also be used as basis for grid animations.
# ... The CA ..................................................................
CA_snapshot:
  based_on: .ca.state
  model_name: SEIRD

  to_plot:
    kind:
      title: ""
      limits: [0, 7]
      # Be aware that the colors need to be in the correct ordering!
      cmap:
        empty: *color_empty
        susceptible: *color_susceptible
        exposed: *color_exposed
        infected: *color_infected
        recovered: *color_recovered
        deceased: *color_deceased
        source: *color_source
        inert: *color_inert

  style:
    <<: [*constrained_layout]

# ... The CA age ..............................................................
CA_age_snapshot:
  based_on: .ca.state
  model_name: SEIRD

  to_plot:
    age:
      title: Age
      cmap: YlGn

# ... The clusters ............................................................
clusters_snapshot:  # FIXME Migrate
  based_on: .ca.state
  model_name: SEIRD

  to_plot:
    cluster_id:
      title: Clusters
      limits: [0, 20]
      cmap: tab20
      no_cbar_markings: true

  transform_data:
    cluster_id:
      - where: ['!=', 0]       # 0 is masked: not part of a cluster
      - mod: 20                # ... to match the tab20 color map

  style:
    <<: [*constrained_layout]
