# Base plot configuration pool for this model
#
# The configurations given here can be used in the <model_name>_plots.yml file.
#
# TODO Reduce duplicates from PredatorPrey model
#
---
.variables:
  model_name: &model_name PredatorPreyPlant
  base_path: &base_path data/PredatorPreyPlant

  # Colors used throughout these plots
  cmap: &cmap
    empty: &color_empty white
    predator: &color_predator '#FFCC66'
    prey: &color_prey '#006666'
    plant: &color_plant '#339999'
    both: &color_both '#CC3333'



# =============================================================================
#  ╔╦╗╔═╗╔╦╗╔═╗╦  ╔═╗╔╦╗╔═╗╔═╗
#   ║ ║╣ ║║║╠═╝║  ╠═╣ ║ ║╣ ╚═╗
#   ╩ ╚═╝╩ ╩╩  ╩═╝╩ ╩ ╩ ╚═╝╚═╝
# =============================================================================
# -- Overloads ----------------------------------------------------------------
# Overload some configs to insert model-specific settings

# Model-specific defaults
.defaults:
  based_on: .defaults

  # Can define something here ...


# .. Creators .................................................................
.creator.universe:
  based_on:
    - .creator.universe
    - .defaults

  dag_options:
    select_path_prefix: *base_path

.creator.multiverse:
  based_on:
    - .creator.multiverse
    - .defaults

  select_and_combine:
    base_path: *base_path





# =============================================================================
#  ╔═╗╦  ╔═╗╔╦╗╔═╗
#  ╠═╝║  ║ ║ ║ ╚═╗
#  ╩  ╩═╝╚═╝ ╩ ╚═╝
# =============================================================================
# -- Phase space plots --------------------------------------------------------
phase_space:
  based_on:
    - .creator.universe
    - .plot.facet_grid.scatter

  select: &pred_prey_plant_density
    predator_density:
      path: predator
      transform:
        - .mean: [ !dag_prev , [ 'x', 'y' ] ]
    prey_density:
      path: prey
      transform:
        - .mean: [ !dag_prev , [ 'x', 'y' ] ]
    plant_density:
      path: plant
      transform:
        - .mean: [ !dag_prev , [ 'x', 'y' ] ]

  transform:
    - operation: xr.Dataset
      kwargs:
        data_vars:
          predator_density: !dag_tag predator_density
          prey_density: !dag_tag prey_density
          plant_density: !dag_tag plant_density
      tag: data

  # How to color-code the time axis
  cmap: viridis_r

  # All below: passed on to plt.scatter
  s: 3.5

# -- Time series of the predator and prey densities ---------------------------
species_densities:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
    - .hlpr.kind.time_series

  select:
    <<: *pred_prey_plant_density

  transform:
    - xr.Dataset:
        data_vars:
          predator: !dag_tag predator_density
          prey: !dag_tag prey_density
    - .to_array: [!dag_prev ]
      kwargs:
        dim: kind
      tag: data

  hue: kind

  helpers:
    set_labels:
      y: Density $[1/A]$
    set_title:
      title: Predator and Prey Densities
    set_legend:
      title: Species

  style: &color_cycler
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{cmap[predator]:}', '{cmap[prey]:}'])"
      cmap: *cmap

# -- Time series of the predator and prey resources ---------------------------
mean_resources:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
    - .hlpr.kind.time_series

  select:
    resource_predator:
      path: resource_predator
      transform:
        - .where: [ !dag_prev ge 1, !dag_prev , 0]  # TODO Syntax ok???
        - .mean: [!dag_prev , ['x', 'y']]
    resource_prey:
      path: resource_prey
      transform:
        - .where: [ !dag_prev ge 1, !dag_prev , 0]
        - .mean: [!dag_prev , ['x', 'y']]

  transform:
    - operation: xr.Dataset
      kwargs:
        data_vars:
          predator: !dag_tag resource_predator
          prey: !dag_tag resource_prey
    - .to_array: [ !dag_prev ]
      kwargs:
        dim: kind
      tag: data

  x: time
  hue: kind

  helpers:
    set_limits:
      y: [0, ~]
    set_labels:
      y: Resource Density $[1/A]$
    set_title:
      title: Mean Total Resources
    set_legend:
      title: Species

  style:
    <<: *color_cycler

# --- Animation of the spatial resource development of prey and predators -----
resources:
  based_on:
    - .creator.universe
    - .plot.ca

  select:
    resource_predator: resource_predator
    resource_prey: resource_prey

    resource_max_predator:
      path: "../../cfg"
      with_previous_result: true
      transform:
        - recursive_getitem: [[*model_name, predator, resource_max]]

    resource_max_prey:
      path: "../../cfg"
      with_previous_result: true
      transform:
        - recursive_getitem: [[*model_name, prey, resource_max]]

  # Select the properties to plot
  to_plot:
    resource_predator:
      title: Predator resources
      vmin: 0
      vmax: !dag_result resource_max_predator
      cmap: YlGn

    resource_prey:
      title: Prey resources
      vmin: 0
      vmax: !dag_result resource_max_prey
      cmap: YlGn


# --- Animation of the spatial development of prey and predator populations ---
population:
  based_on:
    - .creator.universe
    - .plot.ca

  select:
    predator:
      path: predator
      transform: [.data]  # resolve GridDC to have an xr-native object
    prey:
      path: prey
      transform: [.data]  # resolve GridDC to have an xr-native object

  transform:
    # Use base-2 encoding to denote whether a cell is empty, contains only a
    # prey, only a predator or both:
    - mul: [!dag_tag predator, 2]
    - add: [!dag_prev , !dag_tag prey]
      tag: combined

  to_plot:
    combined:
      title: Predator & Prey positions
      cmap:
        empty: *color_empty         # 0
        prey: *color_prey           # 1
        predator: *color_predator   # 2
        both: *color_both           # 3


# --- More detailed animation: prey only, combined, predator only -------------
population_detailed:
  based_on:
    - .creator.universe
    - .plot.ca
  select:
    predator:
      path: predator
      transform: [.data]  # resolve GridDC to have an xr-native object
    prey:
      path: prey
      transform: [.data]  # resolve GridDC to have an xr-native object
    plant:
      path: plant
      transform: [ .data ]  # resolve GridDC to have an xr-native object

  transform:
    # Use base-2 encoding to denote whether a cell is empty or contains both
    - mul: [ !dag_tag predator, !dag_tag prey ]
    - .assign_attrs: [!dag_prev , {'grid_structure': 'square'}]
      tag: combined

  to_plot:
    predator:
      title: Predator
      cmap:
        empty: *color_empty
        predator: *color_predator
      add_colorbar: false

    prey:
      title: Prey
      cmap:
        empty: *color_empty
        prey: *color_prey
      add_colorbar: false

    combined:
      title: Predator & Prey
      cmap:
        empty: *color_empty
        both: *color_both
      add_colorbar: false

    plant:
      title: Plant
      cmap:
        empty: *color_empty
        both: *color_plant
      add_colorbar: false
