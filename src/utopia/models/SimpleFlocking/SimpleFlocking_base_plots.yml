# Base plot configuration for this model
#
# The configurations given here can be used in the <model_name>_plots.yml file
---
_:
  model_data_path:      &base_path      data/SimpleFlocking

  aesthetics:
    hvline: &style_hvline
      linestyle: solid
      color: grey
      alpha: .4
      linewidth: 2.
      zorder: -42



# =============================================================================
#  ╔╦╗╔═╗╔╦╗╔═╗╦  ╔═╗╔╦╗╔═╗╔═╗
#   ║ ║╣ ║║║╠═╝║  ╠═╣ ║ ║╣ ╚═╗
#   ╩ ╚═╝╩ ╩╩  ╩═╝╩ ╩ ╩ ╚═╝╚═╝
# =============================================================================
# -- Overloads ----------------------------------------------------------------
# Overload some configs to insert model-specific settings

# Model-specific defaults
.defaults:
  based_on:
    - .dag.define.defaults
    - .defaults

  # Can define something here ...


# .. Creators .................................................................
# With all plots below being DAG plots, specialize creators accordingly
.creator.universe:
  based_on:
    - .creator.universe
    - .defaults

  select:
    _model_base: "."

  dag_options:
    select_path_prefix: *base_path

.creator.multiverse:
  based_on:
    - .creator.multiverse
    - .defaults

  select_and_combine:
    base_path: *base_path


# .. Plot functions ...........................................................

.plot.agents_in_domain:
  module: model_plots.SimpleFlocking
  plot_func: agents_in_domain


# .. Facet grid specializations
.plot.facet_grid:
  based_on:
    - .plot.facet_grid

  # Explicitly set individual facet size and aspect ratio
  size: 4
  aspect: 1.5

  # May want to use a custom suptitle format string
  suptitle_kwargs:
    # title: "{dim:} = {value:.3g}"   # ... for numeric values
    title: "{dim:} = {value:}"      # ... allowing non-numeric values

.plot.facet_grid.type.time_series:
  based_on:
    - .plot.facet_grid.line
    - .plot.facet_grid.with_auto_encoding
    - .hlpr.limits.x.min_max

  x: time

  helpers:
    set_labels:
      x: time [steps]
      only_label_outer: true





# -----------------------------------------------------------------------------
# Actual plots ----------------------------------------------------------------
# -----------------------------------------------------------------------------

# .. Spatial plots ............................................................
# A spatial plot of agent positions and orientations
agents_in_domain:
  based_on:
    - .creator.universe
    - .plot.agents_in_domain
    - .animation.ffmpeg

  select:
    x:
      path: agent/x
      transform: [.data]
      allow_failure: silent
      fallback: !dag_tag _skip_plot
    y:
      path: agent/y
      transform: [.data]
    orientation:
      path: agent/orientation
      transform: [.data]

    space_extent:
      path: agent/x  # meta data is written to every other dataset as well
      transform:
        - getattr: [!dag_prev , attrs]
        - getitem: [!dag_prev , space_extent]

  transform:
    # Combine data into one dataset
    - xr.Dataset:
      - x: !dag_tag x
        y: !dag_tag y
        orientation: !dag_tag orientation
      tag: data

  # Use a square figure
  helpers:
    setup_figure:
      figsize: [6, 6]

  # Pass on space extent (used for setting limits)
  space_extent: !dag_result space_extent

  # passed on to plt.scatter
  s: 12
  cmap: hsv  # TODO Is there a better cyclic one?



# .. Time series ..............................................................

# A time series plot of the normalized absolute group velocity
time_series/norm_group_velocity:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.type.time_series
    - .hlpr.limits.y.from_zero

  select_and_combine:
    fields:
      data: norm_group_velocity

  helpers:
    set_title:
      title: normalized absolute group velocity

time_series/final_group_velocity:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.line
    - .plot.facet_grid.with_auto_encoding
    - .hlpr.limits.y.from_zero

  expected_multiverse_ndim: [1, 2, 3, 4, 5]

  select_and_combine:
    fields:
      _data:
        path: norm_group_velocity
        transform:
          - .isel.item: [!dag_prev , {time: -1}]  # TODO Consider averaging

  transform:
    - define: !dag_tag _data
      tag: data

  helpers:
    set_labels:
      y: absolute group velocity
    set_title:
      title: final absolute group velocity

  linestyle: none
  marker: "."


# An adaptation of the final group velocity plot, averaged over dimensions
time_series/final_group_velocity_errorbars:
  based_on:
    - time_series/final_group_velocity
    - .plot.facet_grid.errorbars
    - .dag.meta_ops.compute_mean_and_stddev

  dag_options:
    define:
      _dims_to_reduce:
        - define: [[seed]]  # can add other dimension names here

  transform:
    - compute_mean_and_stddev: [!dag_tag _data, !dag_tag _dims_to_reduce]
      allow_failure: true
      fallback: !dag_tag _skip_plot
      tag: data

  y: mean
  yerr: stddev
  use_bands: true


# A time series plot of the orientation's circular std. dev.
time_series/orientation_circstd:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.type.time_series
    - .hlpr.limits.y.from_zero

  select_and_combine:
    fields:
      data: orientation_circstd

  helpers:
    set_title:
      title: circular std. of agent orientation


# A time series plot of the circular mean and std of the agent orientation
time_series/orientation:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.type.time_series

  # -- Data selection
  # This is a bit more complicated, because we need to address the
  # discontinuity in the orientation value to avoid perpendicular lines in the
  # plots. To that end, the time series for each universe are processed and
  # NaN values are set at each jump, such that the plot line is broken.
  dag_options:
    meta_operations:
      get_mean_and_std_orientation:
        - define: !arg 0
          tag: model_data

        - getitem: [!dag_tag model_data, orientation_circmean]
        - .data: !dag_prev
          tag: mean_data
        - getitem: [!dag_tag model_data, orientation_circstd]
        - .data: !dag_prev
          tag: std_data

        - xr.Dataset:
          - mean: !dag_tag mean_data
            std: !dag_tag std_data

  select_and_combine:
    fields:
      mean_and_std_orientation:
        path: ./
        transform:
          - get_mean_and_std_orientation

          # Remove discontinuities; see operations.py for implementation
          # NOTE An alternative operation that preserves data points is
          #      `insert_nan_at_discontinuities`. However, this will introduce
          #      new dummy time coordinates into *all* data dimensions, thus
          #      carrying through the discontinuity into the rest of the data.
          - set_nan_at_discontinuities: !dag_prev
            kwargs:
              variable: mean
              threshold: 3.14159

  transform:
    - define: !dag_tag mean_and_std_orientation
      tag: data

  # -- Plot config
  kind: errorbars
  use_bands: true
  fill_between_kwargs:
    interpolate: true

  x: time
  y: mean
  yerr: std

  helpers:
    set_limits:
      y: [-3.14159, +3.14159]

    set_hv_lines:
      hlines:
        - pos: 0.
          <<: *style_hvline

    set_labels:
      y: orientation (circ. mean and std.)

