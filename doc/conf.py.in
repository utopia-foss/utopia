# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#   Docs:   http://www.sphinx-doc.org/en/master/config

# -- Path setup ---------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys

sys.path.insert(
    0, os.path.abspath("@CMAKE_CURRENT_SOURCE_DIR@/../python/utopya")
)

# Other imports
import sphinx
import sphinx.ext.apidoc



# -- Project information ------------------------------------------------------

project = "Utopia"
copyright = "2016 – 2022, Utopia Developers"
author = "Utopia Developers"

# TODO
# The short X.Y version
version = ""
# The full version, including alpha/beta/rc tags
release = ""


# -- General configuration ----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "4.2"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinxarg.ext",
    # Additional extensions...
    #   ... to include doxygen docs
    "breathe",
    #   ... to render markdown files and tables
    "myst_parser",
    "sphinx_markdown_tables",
    #   ... to pre-process Google-style Python docstrings
    "sphinx.ext.napoleon",
    #   ... to have the IPython directive available for code examples
    "IPython.sphinxext.ipython_console_highlighting",
    "IPython.sphinxext.ipython_directive",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a dict mapping to file types:
source_suffix = {
    ".rst": "restructuredtext",
    ".md": "markdown",
    ".cff": "markdown",
}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output --------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_book_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the theme's
# documentation.
#   https://sphinx-book-theme.readthedocs.io/en/latest/configure.html
#
html_theme_options = {
    "repository_url": "https://gitlab.com/utopia-project/utopia",
    "use_repository_button": True,
    "use_issues_button": True,
    "use_edit_page_button": False,  # NOTE Not working with GitLab repos yet
    "use_download_button": True,
    "use_fullscreen_button": False,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["@CMAKE_CURRENT_SOURCE_DIR@/_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``["localtoc.html", "relations.html", "sourcelink.html",
# "searchbox.html"]``.
#
# html_sidebars = {}

# Custom CSS files, assumed one of `html_static_path`
html_css_files = [
    "css/custom.css",
]

# Title and logo, will appear in the top left-hand corner (theme-dependent)
html_title = ""  # ... because there already is a logo
html_logo = "@CMAKE_CURRENT_SOURCE_DIR@/_static/images/logo_blue_full.svg"
html_favicon = "@CMAKE_CURRENT_SOURCE_DIR@/_static/images/favicon_blue.png"

# -- Options for HTMLHelp output ----------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "utopia-doc"


# -- Options for LaTeX output -------------------------------------------------

latex_elements = {
    # The paper size ("letterpaper" or "a4paper").
    #
    # "papersize": "letterpaper",

    # The font size ("10pt", "11pt" or "12pt").
    #
    # "pointsize": "10pt",

    # Additional stuff for the LaTeX preamble.
    #
    # "preamble": ",

    # Latex figure (float) alignment
    #
    # "figure_align": "htbp",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "Utopia.tex",
        "Utopia Documentation",
        "Utopia Developers",
        "manual",
    ),
]


# -- Options for manual page output -------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        master_doc,
        "utopia",
        "Utopia Documentation",
        [author],
        1,
    ),
]


# -- Options for Texinfo output -----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "Utopia",
        "Utopia Documentation",
        author,
        "Utopia",
        "A comprehensive modelling framework for complex and evolving systems",
        "Miscellaneous",
    ),
]


# -- Options for Epub output --------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = "

# A unique identification for the text.
#
# epub_uid = "

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration --------------------------------------------------

# -- Options for todo extension -----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Mathjax configuration ----------------------------------------------------
# see http://www.sphinx-doc.org/en/master/usage/extensions/math.html#module-sphinx.ext.mathjax

mathjax_path = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"


# -- Autodoc configuration ----------------------------------------------------
# Show both class docstring and __init__ docstring
autoclass_content = "both"

# Default options
autodoc_default_options = {
    "member-order": "bysource",
    "members": True,
    "special-members": True,
    "show-inheritance": False,
    "undoc-members": False,
    "private-members": False,
    "inherited-members": False,  # WARNING `True` will lead to many warnings!
}
# FIXME These don't seem to be recognized by sphinx-apidoc when creating the
#       utopya API reference ...


# -- Breathe configuration ----------------------------------------------------

breathe_projects = {
    "utopia": "@CMAKE_CURRENT_BINARY_DIR@/doxygen/xml/"
}
breathe_default_project = "utopia"



# -- Napoleon configuration ---------------------------------------------------

napoleon_google_docstring = True
# Whether to parse Google style docstrings. (default: true)

napoleon_numpy_docstring = False
# Whether to parse numpy style docstrings. (default: true)

napoleon_include_init_with_doc = True
# True to list __init___ docstrings separately from the class docstring.
# False to fall back to Sphinx’s default behavior, which considers the
# __init___ docstring as part of the class documentation. Defaults to False.

napoleon_include_private_with_doc = False
# True to include private members (like _membername) with docstrings in the
# documentation. False for Sphinx’s default behavior. Default: False

napoleon_include_special_with_doc = True
# True to include special members (like __membername__) with docstrings in the
# documentation. False to fall back to Sphinx’s default behavior. Default: True



# -- IPython Configuration ----------------------------------------------------
# See https://ipython.readthedocs.io/en/stable/sphinxext.html

# NOTE Using default values.



# -- Nitpicky Configuration ---------------------------------------------------
# Be nitpicky about warnings, e.g. to show all references where the target
# could not be found
nitpicky = True

# We need some custom warning handling such that we become aware of new
# warnings in the documentation and can address them.
# However, due to the large amount of API references and the interplay of
# sphinx, doxygen, markdown files, ... there is a high amount of warnings that
# cannot be feasibly addressed.
# In order to reduce those, we do two things:
#   1) Ignore certain missing references explicitly via .nitpick-ignore
#   2) Ignore whole *classes* of missing references via a custom callback

# To-be-ignored missing references. This is a list of (type, target) tuples
# that are to be ignored. See the `.nitpick-ignore` file for more information.
nitpick_ignore = []

for line in open("@CMAKE_CURRENT_SOURCE_DIR@/.nitpick-ignore"):
    line = line.strip()
    if not line or line.startswith("#"):
        continue

    reftype, target = line.split(" ", 1)
    nitpick_ignore.append((reftype, target.strip()))


def on_missing_reference(app, env, node, contnode):
    """Custom handler for missing sphinx references

    This makes it possible to ignore certain classes of warnings completely,
    mainly those that can't be fixed here for the Utopia docs. That way, the
    remaining warnings retain some meaning ...

    Based on: https://stackoverflow.com/a/38576424/1827608
    """
    if (
        node["reftype"] in ("any", "myst") or
        node["refdomain"] in ("cpp", "std") or
        node["reftarget"].startswith("dantro") or
        node["reftarget"].startswith("xarray") or
        node["reftarget"].startswith("xr") or
        node["reftarget"].startswith("numpy") or
        node["reftarget"].startswith("np") or
        node["reftarget"].startswith("collections")
    ):
        # Ignore this missing reference warning (denoted by NOT returning None)
        return contnode
    return None


def manipulate_source_read(app, docname: str, source: list):
    """Manipulates individual files according to some rules.

    WHY? Because this seems to be the only way to address the following
    warnings:

        - Manipulate/delete wrong relative paths in copied files (readme, …)
          or make other changes to copied files.
        - Classes inherited from matplotlib which get a docstring that does not
          follow the usual docstring formats, thus creating a warning. That
          docstring cannot be removed or overwritten due to matplotlib's
          efforts of force-inheriting docstring information ...

    Better idea how to do it? Feel free to try it out and (if it works), let
    us know -- we would very much appreciate it!

    .. note::

        ``source`` contains a *single* entry that is the full page source as a
        string, including all line break characters. Manipulation of the
        source can be done by *mutably* changing that single entry in the
        ``source`` object (a list).
    """
    # Exclude utopya.plot_funcs._mpl_helpers.HandlerEllipse because it contains
    # docstrings that create warnings and that we cannot get rid of.
    if docname == "api/utopya/utopya.plot_funcs":
        s = "\n".join([
            "utopya.plot\_funcs.\_mpl\_helpers module",
            "----------------------------------------",
            "",
            ".. automodule:: utopya.plot_funcs._mpl_helpers",
            "   :members:",
            "   :undoc-members:",
            "   :show-inheritance:",
            "   :private-members:",
        ])
        r = s + "\n   :exclude-members: HandlerEllipse"

        source[0] = source[0].replace(s, r)
        return

    if docname == "README":
        # Drop everything before the installation instructions
        marker = "<!-- marker-installation-instructions -->"
        new_start = source[0].find(marker) + len(marker)
        source[0] = "# Installation" + source[0][new_start:]
        return



# -- Pass special options to build setup --------------------------------------

def run_apidoc(app):
    """A function to run apidoc, creating the utopya API documentation"""
    ignore_paths = []

    # Get the required directory paths
    # FIXME That directory no longer exists
    # TODO Find a way to still build the utopya API alongside
    cur_dir = "@CMAKE_CURRENT_SOURCE_DIR@"
    out_dir = os.path.join(cur_dir, "api", "utopya")
    module_dir = os.path.join(cur_dir, "..", "python", "utopya", "utopya")

    argv = [
        "--force",
        "--private",
        "--no-toc",
        "--module-first",
        "-o",
        out_dir,
        module_dir,
    ] + ignore_paths

    sphinx.ext.apidoc.main(argv)


def setup(app):
    # Run the apidoc builder
    # app.connect("builder-inited", run_apidoc)  # FIXME see above

    # Handle some events manually
    app.connect("source-read", manipulate_source_read)
    app.connect("missing-reference", on_missing_reference)
