# Continuous Integration and Deployment of Utopia Framework Repository
---
# ++ Pipeline preparations ++++++++++++++++++++++++++++++++++++++++++++++++++++
variables:
  # Need to clone submodules as well
  GIT_SUBMODULE_STRATEGY: recursive

  # Variables needed for docker image deployment
  # The different segments of the resulting test image tag
  BASE_IMAGE_UBUNTU_VERSION: focal  # NOTE Adjust upon new Ubuntu Release
  BASE_IMAGE_VERSION: "2.1"         # NOTE Increment when changing dockerfile
  BASE_IMAGE_NAME: ccees/utopia-base
  BASE_IMAGE: "${BASE_IMAGE_NAME}:${BASE_IMAGE_UBUNTU_VERSION}-v${BASE_IMAGE_VERSION}"
  # NOTE Do not forget to increment the BASE_IMAGE_VERSION when changes to the
  #      docker file are introduced.

  # Variables controlling the deployed Utopia image and its development
  # counterpart (deployed from the ci_test stage for testing)
  UTOPIA_IMAGE_NAME: ccees/utopia
  UTOPIA_IMAGE_REMOTE_URL: https://gitlab.com/utopia-project/utopia.git

  UTOPIA_DEV_IMAGE_TAG: dev
  UTOPIA_DEV_IMAGE_CHECKOUT: master

  # Setting number of processes for build jobs and DIND jobs
  CPUS_BUILD: 4
  CPUS_TEST: 4
  CPUS_DIND: 4

  # Build flags
  MAKE_FLAGS_BUILD: -j$CPUS_BUILD
  MAKE_FLAGS_TEST: -j$CPUS_TEST

  # Utopia virtual environment shortcuts
  RUN_IN_UTOPIA_ENV: $CI_PROJECT_DIR/build/run-in-utopia-env
  ENTER_UTOPIA_ENV: source $CI_PROJECT_DIR/build/activate

  # Docker Hub login command
  DOCKER_HUB_LOGIN: docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  # NOTE Both variables here are secret and protected variables. While the
  #      login command will complain, using --password-stdin actually EXPOSES
  #      the variable! No no.

  # The GitLab Pages where artifacts can be shown
  PAGES_URL: https://utopia-project.gitlab.io/-/utopia


stages:
  - setup     # (on master) set up the docker base image
  - build     # build utopia and all tests
  - test      # carry out tests
  - deploy    # deploy documentation; build and deploy docker image (on master)


# As base image for the jobs, use the Utopia image created in the setup stage
image: ${BASE_IMAGE}


# .. YAML Templates ...........................................................
# These are used in job definitions via the `extends` keyword

.use_multicore_group_runners:
  tags:
    # These tags make the jobs run using dedicated multicore group runners:
    - default
    - multicore

# Create artifacts of build results and meta-data that's shared between jobs
.default_artifacts:
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build       # Build files
      - $CI_PROJECT_DIR/python      # Editably-installed python code
      - $CI_PROJECT_DIR/.config     # Frontend configuration files
    expire_in: 3 hours


# Add coverage report visualization for MRs
# Docs: https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
# Reports are generated from multiple jobs and is then merged by GitLab
.coverage_report:
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/build/coverage/cobertura.xml


# Use the Docker-in-Docker executor and services, log into Docker Hub
.dind:
  image: docker:stable
  tags:
    - dind
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - $DOCKER_HUB_LOGIN


# ++ Job definitions ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# -- Setup stage --------------------------------------------------------------
# This stage takes care to build the utopia base testing image

setup:utopia-base:
  extends: .dind
  stage: setup
  only:
    - master
    - web
  script:
    - docker build -f docker/utopia-base.dockerfile
                   -t ${BASE_IMAGE}
                   -t ${BASE_IMAGE_NAME}:latest
                   --build-arg UBUNTU_VERSION=${BASE_IMAGE_UBUNTU_VERSION}
                   .
    - docker push ${BASE_IMAGE}
    - docker push ${BASE_IMAGE_NAME}:latest


# -- Build stage --------------------------------------------------------------
# In this stage, the tests, models, and documentation is built
# The artifacts of the tests and models jobs are needed in the test stage

# Build the documentation and expose it as a review environment
build:docs:
  stage: build
  allow_failure: true
  script:
    - mkdir build && cd build
    - cmake ..
    - make doc
  after_script:
    # Append the error log such that it's more convenient to read in the CI log
    - echo "-------- Errors emitted during building of documentation --------"
    - cat $CI_PROJECT_DIR/build/doc/build_errors.log || true
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - $CI_PROJECT_DIR/build/doc
      - $CI_PROJECT_DIR/build/doc/build_errors.log
    expire_in: 1 day
    expose_as: Documentation build - including error log

  environment:
    name: review/docs/$CI_COMMIT_REF_NAME
    auto_stop_in: six weeks
    url: $PAGES_URL/-/jobs/$CI_JOB_ID/artifacts/build/doc/html/index.html



# Build the core unit tests; artifacts used in test stage
build:tests_core:
  stage: build
  extends:
    - .default_artifacts
    - .use_multicore_group_runners
  script:
    - mkdir build && cd build
    - cmake -DCPP_COVERAGE=On -DMULTITHREADING=On ..
    - make $MAKE_FLAGS_BUILD build_tests_core


# Build the data I/O unit tests; artifacts used in test stage
build:tests_dataio:
  extends: build:tests_core
  script:
    - mkdir build && cd build
    - cmake -DCPP_COVERAGE=On ..
    - make $MAKE_FLAGS_BUILD build_tests_dataio


# Build the models and their tests; artifacts used in test stage
build:models:
  stage: build
  extends:
    - .default_artifacts
    - .use_multicore_group_runners
  script:
    - mkdir build && cd build
    - cmake -DCPP_COVERAGE=On -DMULTITHREADING=On ..
    - make $MAKE_FLAGS_BUILD all
    - make $MAKE_FLAGS_BUILD build_tests_models
  after_script:
    # Copy the frontend configuration to the project dir such that it is part
    # of the artifacts and can be re-used in the test jobs
    - cp -r ~/.config $CI_PROJECT_DIR/


# Build in debug mode using gcc
build:debug:
  stage: build
  allow_failure: true
  extends:
    - .use_multicore_group_runners
  variables:
    CXXFLAGS: -Werror
  script:
    - mkdir build && cd build
    - cmake
        -DCMAKE_BUILD_TYPE=Debug
      ..
    #
    # Build all the tests
    - make $MAKE_FLAGS_BUILD build_tests_core
    - make $MAKE_FLAGS_BUILD build_tests_dataio
    - make $MAKE_FLAGS_BUILD build_tests_models
    #
    # Test that additional convenience targets exist
    - make $MAKE_FLAGS_BUILD build_tests_backend
    - make $MAKE_FLAGS_BUILD build_tests_all
    #
    # Build all the models
    - make $MAKE_FLAGS_BUILD all


# Build in debug mode using clang
build:debug-clang:
  extends: build:debug
  variables:
    CC: clang
    CXX: clang++
    CXXFLAGS: -Werror


# Build for installation tests
# TODO Consider making this a test-stage job to avoid duplicate compilation
build:install:
  stage: build
  extends:
    - .use_multicore_group_runners
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build
      - $CI_PROJECT_DIR/install  # installation directory
    expire_in: 3 hours
  script:
    - mkdir build && cd build
    - cmake
        -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
        -DCMAKE_BUILD_TYPE=Release
        -DMULTITHREADING=On
        -DCMAKE_EXPORT_PACKAGE_REGISTRY=On
        ..
    - make $MAKE_FLAGS_BUILD install
    - cp -r ~/.cmake .  # makes packgage registry available as artifact


# -- Test stage ---------------------------------------------------------------
# Uses artifacts of the build stage to test: backend, models, CLI, installation

# A separate test job for running doctest (requires models to be compiled)
test:docs:
  stage: test
  needs:
    - "build:docs"
    - "build:models"
  script:
    - cd build
    - make check_docs


# Test the core library
test:core:
  stage: test
  extends:
    - .coverage_report
    - .use_multicore_group_runners
  needs:
    - "build:tests_core"
  variables:
    GCOVR_PATHS:
      --root $CI_PROJECT_DIR
      --filter $CI_PROJECT_DIR/include/utopia/core
  script:
    - cd build
    - make $MAKE_FLAGS_TEST test_core
  after_script:
    - $ENTER_UTOPIA_ENV

    # Install gcvor
    - pip3 install gcovr
    - cd $CI_PROJECT_DIR/build
    - mkdir coverage

    # Run once for report in HTML (for viewing) and XML (for cobertura) ...
    - gcovr $GCOVR_PATHS --html --html-details -o coverage/report.html --print-summary --xml coverage/cobertura.xml

    # ... and again for a coverage report in the GitLab job log
    - gcovr $GCOVR_PATHS
  coverage: '/^lines: (\d+.\d+\%).*$/'   # matches output of --print-summary
  artifacts:
    name: "$CI_JOB_NAME"
    expose_as: Coverage report of Core tests
    paths:
      - build/coverage/
    expire_in: 1 week

  environment:
    name: review/coverage/$CI_COMMIT_REF_NAME/core
    auto_stop_in: six weeks
    url: $PAGES_URL/-/jobs/$CI_JOB_ID/artifacts/build/coverage/report.html


# Test the data I/O library
test:dataio:
  extends: test:core
  needs:
    - "build:tests_dataio"
  variables:
    GCOVR_PATHS:
      --root $CI_PROJECT_DIR
      --filter $CI_PROJECT_DIR/include/utopia/data_io
  script:
    - cd build
    - make $MAKE_FLAGS_TEST test_dataio
  artifacts:
    expose_as: Coverage report of DataIO tests

  environment:
    name: review/coverage/$CI_COMMIT_REF_NAME/dataio


# Test the models via their own tests and via the CLI
test:models:
  stage: test
  extends: test:core
  needs:
    - "build:models"
  variables:
    # Exclude any paths containing 'test', should not count towards coverage
    GCOVR_PATHS:
      --root $CI_PROJECT_DIR
      --filter $CI_PROJECT_DIR/src/utopia/models
      --exclude '.*[Tt]est.*'
  before_script:
    # Place a symlink at the expected path to make the model registry available
    - &add_cfg_symlink ln -s $CI_PROJECT_DIR/.config ~/.config && ls -la ~/
  script:
    # Test models using C++ and Python model tests
    - cd build
    - make $MAKE_FLAGS_TEST test_models

    # Also test each model via the CLI.
    # Need to enter the virtual env first
    - $ENTER_UTOPIA_ENV

    # First, the test and benchmark models:
    - utopia run dummy --debug
    - utopia run CopyMeGraph --debug
    - utopia run CopyMeGrid --debug
    - utopia run CopyMeBare --debug --no-eval
    - utopia run HdfBench --run-mode sweep --num-seeds 3 --debug

    # Now the actual models:
    - utopia run ContDisease --debug
    - utopia run Environment --debug -N 10
    - utopia run ForestFire --debug
    - utopia run GameOfLife --debug
    - utopia run Geomorphology --debug
    - utopia run Opinionet --debug
    - utopia run PredatorPrey --debug
    - utopia run SandPile --debug -N 100
    - utopia run SEIRD --debug -N 50
    - utopia run SimpleEG --debug
    - utopia run SimpleFlocking --debug
    - utopia run Vegetation --debug

  artifacts:
    expose_as: Coverage report of model tests

  environment:
    name: review/coverage/$CI_COMMIT_REF_NAME/models


# Test the utopia command line interface
# TODO Consider removing this test -- is basically tested by utopya already
test:cli:
  stage: test
  needs:
    - "build:models"
  artifacts:
    name: utopia_output
    paths:
      - $CI_PROJECT_DIR/utopia_output/
    expose_as: Utopia Output
    expire_in: 3h
  before_script:
    # Make model registry available (from build:models job)
    - *add_cfg_symlink
  script:
    # Now, enter the virtual environment and test the CLI
    - $ENTER_UTOPIA_ENV

    # Adjust the user configuration to store to a local directory
    - utopia config user --set paths.out_dir=$CI_PROJECT_DIR/utopia_output --get

    # Show which models are available
    - utopia models ls --long

    # Test the run command
    - utopia run dummy

    # Test passing a custom run configuration and performing a sweep
    - utopia run dummy python/model_tests/dummy/sweep.yml --run-mode sweep --note sweep

    # Test setting the number of steps (negative should fail)
    - utopia run dummy --num-steps 1 --no-eval
    - if utopia run dummy --num-steps -1; then exit 1; else echo "all good"; fi

    # Test setting the number of seeds (>= 1 should work)
    - utopia run dummy --num-seeds 2 --run-mode sweep --no-eval --note sweep_via_cli
    - utopia run dummy --num-seeds 1 --run-mode sweep --no-eval --note sweep_via_cli_single_seed

    # Test debug mode and setting simulation errors level
    - utopia run dummy --note debug0 --num-steps 3 -d
    - utopia run dummy --note debug1 --num-steps 3 --debug

    # Write start and step
    - utopia run dummy --note write_sparse --num-steps 5 --write-every 2
    - utopia run dummy --note write_last -N 5 --ws 5

    # Test using a configuration set to specify run and plots config
    - utopia run ForestFire --cs universe_example -N 10 --debug
    - if utopia run ForestFire --cs bad_config_set_name; then exit 1; else echo "\nFailed as expected"; fi

    # Test the printing of the data tree
    # NOTE Need to sleep here because the eval directory will already exist
    - utopia run dummy --show-data-tree full
    - sleep 1.1 && utopia eval dummy --show-data-tree full
    - utopia run dummy --show-data-tree none
    - sleep 1.1 && utopia eval dummy --show-data-tree none

    # Test tree file caching
    - sleep 1.1 && utopia run dummy --use-data-tree-cache
    - sleep 1.1 && utopia eval dummy --tc
    - sleep 1.1 && utopia eval dummy --tc

    # Test the plotting capabilities
    - utopia run dummy --note plt0 --no-eval
    - sleep 1.1 && utopia eval dummy  # should create the corresponding plots

    - utopia run dummy --note plt1
    - utopia run dummy --note plt2 --plot-only states
    - utopia run dummy --note plt3
        --plots-cfg src/utopia/models/dummy/dummy_plots.yml
    - utopia run dummy --note plt4
        --update-plots-cfg state_step_1.based_on=states
        -u state_step_1.step=1
    - utopia run dummy --note plt5
        --update-plots-cfg src/utopia/models/dummy/dummy_plots.yml
    - utopia run dummy --note plt6 --load-parallel --num-seeds 3 --po states

    # Test the interactive plotting mode, piping mock input to it
    # None of these should lead to an exit code other than 0
    - sleep 1.1 && utopia eval --interactive dummy
        <<< $'\n--plot-only states\n--plot-only state_mean --debug'
    - sleep 1.1 && utopia eval --interactive dummy
        <<< $'--debug\n--debug --update-plots-cfg state_mean.foo=bar'
    - sleep 1.1 && utopia eval --interactive dummy
        <<< $'--plot-only some_non_existing_plot --debug'
    - sleep 1.1 && utopia eval --interactive dummy
        <<< $'--plot-only some_non_existing_plot --debug'
    - sleep 1.1 && utopia eval --interactive dummy
        <<< $'some offending arguments\n--help'

    # Test the setting of parameters and config parameters from CLI
    - utopia run dummy --set-model-params foo=3 --mp bar=2.0
    - utopia run dummy --set-pspace-params num_steps=3 --pp write_every=2
    - utopia run dummy --set-params parameter_space.seed=23

    # Test run configs with a parameter space of >0 dimensions which is then
    # reduced to 0 dimensions -- data retrieval and plotting should still work
    - utopia run ForestFire --debug --num-seeds=3 --note some_sweep
    - utopia run ForestFire --debug --num-seeds=3 --run-mode single --note not_a_sweep

    # Test batch evaluation
    # - utopia batch python/utopya/test/cfg/batch_file.yml --single-worker --debug --note batch-CLI-test  # FIXME Lacking test file

    # Fetching model information
    - utopia models info dummy
    - utopia models info ForestFire
    - utopia models info SEIRD

    # Test the model copying, first as a dry run, then for real
    # TODO Reactivate, not currently implemented in utopya
    # - utopia models copy dummy --new-name FooBar --target-project Utopia --non-interactive --dry-run
    # - utopia models copy dummy --new-name FooBar --target-project Utopia --non-interactive

    # Test that it is registered. Note: Does not test building!
    # - cd build && cmake ..
    # - if utopia models ls | grep -q FooBar; then echo "Found copied FooBar!"; else echo "Could not find copied FooBar model!" && exit 1; fi

    # Attempting to copy it again should fail
    # - if utopia models copy dummy --new-name FooBar --target-project Utopia --non-interactive --dry-run; then exit 1; else echo "\nFailed as expected!"; fi

    # Test model registry entry removal interface; do this last, obviously
    - utopia models rm dummy --label added_by_cmake
    - if utopia run dummy; then exit 1; else echo "\nFailed as expected"; fi

    - utopia models rm SEIRD --all --yes
    - if utopia run SEIRD; then exit 1; else echo "\nFailed as expected"; fi


# Test if using Utopia in a downstream module works
test:link_build_tree:
  stage: test
  needs:
    - "build:install"
  script:
    # Move the package registry into the user path
    - cd build && cp -r .cmake ~/

    # Build downstream module
    - cd $CI_PROJECT_DIR && mkdir build-dep && cd build-dep

    # Package should be found via registry
    - cmake ../test/dependency
    - make $MAKE_FLAGS_BUILD all
    - make test


# Test if using Utopia in a downstream module works also via the install tree
test:link_install_tree:
  extends: test:link_build_tree
  script:
    # Build downstream module
    - mkdir build-dep && cd build-dep

    # CMake v3.10 is restricted to _DIR, CMake >=v3.14 can use _ROOT
    - cmake
        -DUtopia_DIR=$CI_PROJECT_DIR/install/lib/cmake/Utopia
        -DUtopia_ROOT=$CI_PROJECT_DIR/install
        ../test/dependency
    - make $MAKE_FLAGS_BUILD all
    - make test


# -- Deploy Stage -------------------------------------------------------------
# Deploy ...
#   - the documentation by triggering a pipeline in the docs project, which has
#     the docs.utopia-project.org domain registered with GitLab Pages
#   - the latest Utopia docker image to Docker Hub: ccees/utopia:latest

deploy:docs_gitlab_pages:
  image: curlimages/curl:latest
  stage: deploy
  only:
    - master@utopia-project/utopia
  needs:
    - job: "build:docs"
      artifacts: false
  script:
    - curl -X POST -F token=$DOC_DEPLOYMENT_TRIGGER_TOKEN -F ref=master https://gitlab.com/api/v4/projects/25960923/trigger/pipeline
  environment:
    name: production/docs
    url: https://docs.utopia-project.org/


deploy:dockerhub-latest:
  extends: .dind
  stage: deploy
  only:
    - master@utopia-project/utopia
  script:
    - docker build -f docker/utopia.dockerfile
                   --build-arg BASE_IMAGE=$BASE_IMAGE
                   --build-arg PROCNUM=$CPUS_DIND
                   --build-arg GIT_CHECKOUT=master
                   --build-arg GIT_REMOTE_URL=$UTOPIA_IMAGE_REMOTE_URL
                   -t $UTOPIA_IMAGE_NAME:latest
                   ./
    - docker push $UTOPIA_IMAGE_NAME:latest
  environment:
    name: production/docker-latest
    url: https://hub.docker.com/r/$UTOPIA_IMAGE_NAME
